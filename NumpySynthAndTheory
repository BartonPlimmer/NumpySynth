#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generate Sinewave With Harmonics

Created on Sun Feb  5 14:40:25 2023

@author: bartonplimmer
"""


import numpy as np
from scipy.io.wavfile import write
import sounddevice as sd
import matplotlib.pyplot as plt
import time

class Tone:
    def __init__(self, freq =440, fs = 44100, length = 2):
        self.freq = freq
        self.fs = fs
        self.t = np.arange(fs*length)/fs
        self.sig = self.gen_sinwave(freq = freq)
        
    def calc_overtones(self):
        i = 2
        overtones = [self.freq]
        new_tone = 0
        while (new_tone < 44100/2):
            new_tone = i*self.freq
            i = i+1
            overtones.append(new_tone)
        return overtones
    
    def add_overtones(self, gains = [1]):
        overtones = self.calc_overtones()
        sig = np.zeros(np.shape(self.t))
        for i in range(len(gains)):
            sig = sig + gains[i]*self.gen_sinwave(freq = overtones[i])
        self.sig = sig/np.max(np.abs(sig))
            
    
    def gen_sinwave(self, freq=440, phase=0):
        return np.sin(self.t*freq*np.pi + phase)
            
    
    def vibrato(self,sig, freq = 10, depth = 0.5, phase = 0):
        sig = (np.sin(self.t*freq*np.pi + phase)*depth/2 + 1 - depth)*sig
        return sig
    
    def play(self):
        sd.play(self.sig, samplerate=self.fs)


class True_Temp:
    def __init__(self, key = 440):
        self.key = key
        self.mode = 'Ionian'
        self.major_scale = {1:1*key,2:key*(9/4)/2,3:key*(5/4),4:key*(2/3)*2,5:key*(3/2),6:key*(5/6)*2,7:key*(15/8)}
        self.chords = {
                  1:{1:self.major_scale[1],3:self.major_scale[3],5:self.major_scale[5],7:self.major_scale[7],9:self.major_scale[2],11:self.major_scale[4],13:self.major_scale[6]},
                  2:{1:self.major_scale[2],3:self.major_scale[4],5:self.major_scale[6],7:self.major_scale[1],9:self.major_scale[3],11:self.major_scale[5],13:self.major_scale[7]},
                  3:{1:self.major_scale[3],3:self.major_scale[5],5:self.major_scale[7],7:self.major_scale[2],9:self.major_scale[4],11:self.major_scale[6],13:self.major_scale[1]},
                  4:{1:self.major_scale[4],3:self.major_scale[6],5:self.major_scale[1],7:self.major_scale[3],9:self.major_scale[5],11:self.major_scale[7],13:self.major_scale[2]},
                  5:{1:self.major_scale[5],3:self.major_scale[7],5:self.major_scale[2],7:self.major_scale[4],9:self.major_scale[6],11:self.major_scale[1],13:self.major_scale[3]},
                  6:{1:self.major_scale[6],3:self.major_scale[1],5:self.major_scale[3],7:self.major_scale[5],9:self.major_scale[7],11:self.major_scale[2],13:self.major_scale[4]},
                  7:{1:self.major_scale[7],3:self.major_scale[2],5:self.major_scale[4],7:self.major_scale[6],9:self.major_scale[1],11:self.major_scale[3],13:self.major_scale[5]}
                  }
        
    

class Effects:
    def __init__(self,sig = None, fs = 44100):
        self.t = np.arange(len(sig))/fs
        self.fs = fs
        self.sig = sig
    
    def tremolo(self, freq = 10, depth = 0.5, phase = 0):
        self.sig = (np.sin(self.t*freq*np.pi + phase)*depth/2 + 1 - depth)*self.sig
        return self.sig
            
    
    
        
key = 440
chords = True_Temp(key).chords
song = [2,5,1,6,
        3,6,3,5,
        4,1]

song_sig = np.zeros(1)

length =5

for c in song:
    chord = c
    print(chord)
    
    
    myTone = Tone(freq = chords[chord][1], length = length)
    t = myTone.t
    vib_freq = 440/(2**7)
    
    gains = 1/((np.arange(20)+1)**2.7)
    myTone.add_overtones(gains = gains)
    root = myTone.sig
    root = myTone.vibrato(root, depth = 0.3, freq = vib_freq, phase = 2*np.pi/3)
    
    
    myTone = Tone(freq = chords[chord][5],length = length)
    #gains = np.random.uniform(0, 1, 3)
    myTone.add_overtones(gains = [1])
    fifth = myTone.sig
    fifth = myTone.vibrato(fifth, depth = 0, freq = vib_freq, phase = 2*np.pi*(2/3))
    
    
    myTone = Tone(freq = chords[chord][3],length = length)
    myTone.add_overtones(gains = [1, 0, 0.02, 0 , 0.2, 0, 0.01, 0, 0.12])
    third = myTone.sig
    third = myTone.vibrato(third, depth = 0.2, freq = vib_freq, phase = 2*np.pi)
    
    myTone = Tone(freq = chords[chord][7], length = length)
    gains = np.random.uniform(0, 1, 3)
    myTone.add_overtones(gains = [1])
    seventh = myTone.sig
    seventh = myTone.vibrato(seventh, depth = 0, freq = vib_freq, phase = 2*np.pi*(1/3))
    
    
    myTone = Tone(freq = chords[chord][1]/2, length = length)
    myTone.add_overtones(gains = [1])
    bass = myTone.sig
    #bass = myTone.vibrato(seventh, depth = 0, freq = vib_freq, phase = 2*np.pi*(1/3))
    
    
    sig = root + 0.8*third + 0.75*fifth + 0.75*seventh + bass
    #sig = bass
    sig = sig/np.max(np.abs(sig))
    
    #sig = Effects.tremolo(sig = sig, freq = 440/(2**5), depth = 0.2)
    
    #sd.play(sig, samplerate=myTone.fs)
    song_sig = np.append(song_sig,sig)
    #time.sleep(length)
    



song_sig = Effects(sig=song_sig).tremolo(freq = 32/length, depth = 1,phase = 0)
sd.play(song_sig, samplerate=myTone.fs)

